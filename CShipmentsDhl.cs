using ConsoleAPI1;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace AzureFTimer;

//--- file: CShipmentsDhl.cs -----------
public class CShipmentsDhl
{
    public string _htmlTable { set; get; }
    public string _htmlMessage { set; get; }

    private readonly HttpClient _httpClient;

    private readonly SecretData cSecret;

    public CShipmentsDhl()
    {
        _httpClient = new HttpClient();
        _htmlTable = "";
        _htmlMessage = "";
        cSecret = new();

    }

    public async Task Run()
    {
        _htmlTable = "";
        var apiKey = cSecret.ApiKey_EasyPost; // GetApiKey(); //"EASYPOST_TEST_API_KEY"; // Replace with your EasyPost test key
        var content = Body();

        string sQuestEvents = "https://api.easypost.com/v2/events";         //.Post
        string sQuestShipments = "https://api.easypost.com/v2/shipments";   //.Get

        //var request = new HttpRequestMessage(HttpMethod.Post, sQuestEvents);
        var request = new HttpRequestMessage(HttpMethod.Get, sQuestShipments);
        request.Content = content;
        request.Headers.Add("Authorization", $"Bearer {apiKey}");

        var response = await _httpClient.SendAsync(request);
        var result = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            _htmlTable = "❌ Error: EasyPost reading error";
            _htmlMessage = _htmlTable;
        }
        else
        {
            _htmlMessage = "✅ Success, data read from EasyPost!";
            _htmlTable = CreateHtmlTable(result);
            File.WriteAllText("shipments.html", _htmlTable);
        }
    }

    public string GetMessageToPost()
    {
        string sDate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

        string mess = $@"
        <b>Automatic EasyPost Mail Control Report</b>.

        This report was automatically generated by Azure Function at: <b>{sDate}</b>.<br>

        Below is a list of shipments reported to date.
        Azure Function has automatically converted reported shipments to shipments awaiting a courier. 
        The courier will pick up the packages today and deliver them to recipients at the designated time.
        <br><br>
        Below is a list of shipments:
        <br>
        ";

        return (mess);
    }

    public string CreateHtmlTable(string jsonResponse)
    {
        using var doc = JsonDocument.Parse(jsonResponse);
        var shipments = doc.RootElement.GetProperty("shipments");

        var sb = new StringBuilder();

        // Style block
        sb.AppendLine(@"
        <style>
            table {
                border-collapse: collapse;
                width: 600px;
                margin-bottom: 20px;
                font-family: Arial, sans-serif;
                font-size: 14px;
            }
            td {
                border: 1px solid #ccc;
                padding: 6px 10px;
                vertical-align: top;
            }
            tr:nth-child(even) {
                background-color: #f9f9f9;
            }
            tr td:first-child {
                font-weight: bold;
                width: 160px;
                background-color: #f0f0f0;
            }
            tr:first-child td {
                background-color: #e0e0e0;
                font-weight: bold;
                text-align: center;
            }
        </style>
        ");

        int index = 1;
        foreach (var shipment in shipments.EnumerateArray())
        {
            sb.AppendLine("<table>");

            sb.AppendLine($"<tr><td colspan='2'>Shipment {index++}</td></tr>");
            sb.AppendLine($"<tr><td>shipment: id:</td><td>{shipment.GetProperty("id")}</td></tr>");
            sb.AppendLine($"<tr><td>created_at:</td><td>{shipment.GetProperty("created_at")}</td></tr>");
            sb.AppendLine($"<tr><td>status:</td><td>{shipment.GetProperty("status")}</td></tr>");

            var parcel = shipment.GetProperty("parcel");
            sb.AppendLine("<tr><td colspan='2'>Parcel</td></tr>");
            sb.AppendLine($"<tr><td>parcel: id:</td><td>{parcel.GetProperty("id")}</td></tr>");
            sb.AppendLine($"<tr><td>l:w:h:</td><td>{parcel.GetProperty("length")} x {parcel.GetProperty("width")} x {parcel.GetProperty("height")}</td></tr>");
            sb.AppendLine($"<tr><td>weight:</td><td>{parcel.GetProperty("weight")}</td></tr>");

            var rate = shipment.GetProperty("selected_rate");
            sb.AppendLine("<tr><td colspan='2'>Selected Rate</td></tr>");
            sb.AppendLine($"<tr><td>selected_rate:id:</td><td>{rate.GetProperty("id")}</td></tr>");
            sb.AppendLine($"<tr><td>carrier:</td><td>{rate.GetProperty("carrier")}</td></tr>");
            sb.AppendLine($"<tr><td>rate:</td><td>{rate.GetProperty("rate")}</td></tr>");
            sb.AppendLine($"<tr><td>currency:</td><td>{rate.GetProperty("currency")}</td></tr>");

            var from = shipment.GetProperty("from_address");
            sb.AppendLine("<tr><td colspan='2'>From</td></tr>");
            sb.AppendLine($"<tr><td>name:</td><td>{from.GetProperty("name")}</td></tr>");
            sb.AppendLine($"<tr><td>city:</td><td>{from.GetProperty("city")}</td></tr>");
            sb.AppendLine($"<tr><td>street1:</td><td>{from.GetProperty("street1")}</td></tr>");
            sb.AppendLine($"<tr><td>country:</td><td>{from.GetProperty("country")}</td></tr>");

            var to = shipment.GetProperty("to_address");
            sb.AppendLine("<tr><td colspan='2'>To</td></tr>");
            sb.AppendLine($"<tr><td>name:</td><td>{to.GetProperty("name")}</td></tr>");
            sb.AppendLine($"<tr><td>city:</td><td>{to.GetProperty("city")}</td></tr>");
            sb.AppendLine($"<tr><td>street1:</td><td>{to.GetProperty("street1")}</td></tr>");
            sb.AppendLine($"<tr><td>country:</td><td>{to.GetProperty("country")}</td></tr>");

            sb.AppendLine("</table>");
        }

        return sb.ToString();
    }

    private StringContent Body()
    {
        var myBody = new
        {
        };

        var json = JsonSerializer.Serialize(myBody);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        return (content);
    }
}
